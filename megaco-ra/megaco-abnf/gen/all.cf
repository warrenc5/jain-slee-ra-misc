megacoMessage        = [authenticationHeader SEP ] message;

authenticationHeader = AuthToken EQUAL SecurityParmIndex COLON SequenceNum COLON AuthData;

SecurityParmIndex    = "0x" 8(HEXDIG);

SequenceNum          = "0x" 8(HEXDIG);

AuthData             = "0x" 24*64(HEXDIG);

message            = MegacopToken SLASH Version SEP mId SEP messageBody;

messageBody          = ( errorDescriptor / transactionList );

transactionList      = 1*( transactionRequest / transactionReply / transactionPending / transactionResponseAck );

transactionPending   = PendingToken EQUAL TransactionID LBRKT RBRKT;

transactionResponseAck = ResponseAckToken LBRKT transactionAck *(COMMA transactionAck) RBRKT;

transactionAck = transactionID / (transactionID "-" transactionID);

transactionRequest   = TransToken EQUAL TransactionID LBRKT actionRequest *(COMMA actionRequest) RBRKT;

actionRequest        = CtxToken EQUAL ContextID LBRKT (( contextRequest [COMMA  commandRequestList]) / commandRequestList) RBRKT;

contextRequest    = ((contextProperties [COMMA contextAudit]) / contextAudit);

contextProperties    = contextProperty *(COMMA contextProperty);

contextProperty    = (topologyDescriptor / priority / EmergencyToken);

contextAudit   = ContextAuditToken LBRKT contextAuditProperties *(COMMA contextAuditProperties) RBRKT;

contextAuditProperties = ( TopologyToken / EmergencyToken / PriorityToken );

commandRequestList = [CommandOptionalToken] [CommandWildcardToken] commandRequest *(COMMA [CommandOptionalToken] [CommandWildcardToken] commandRequest);

commandRequest      = ( ammRequest / subtractRequest / auditRequest / notifyRequest / serviceChangeRequest);

transactionReply     = ReplyToken EQUAL TransactionID LBRKT [ ImmAckRequiredToken COMMA ] ( errorDescriptor / actionReplyList ) RBRKT;

actionReplyList      = actionReply *(COMMA actionReply );

actionReply          = CtxToken EQUAL ContextID LBRKT (( errorDescriptor / commandReply ) / (commandReply COMMA errorDescriptor)) RBRKT;

commandReply      = (( contextProperties [COMMA commandReplyList] ) / commandReplyList );

commandReplyList     = commandReplys *(COMMA commandReplys );

commandReplys        = (serviceChangeReply / auditReply / ammsReply / notifyReply );

ammRequest           = (AddToken / MoveToken / ModifyToken ) EQUAL TerminationID [LBRKT ammParameter *(COMMA ammParameter) RBRKT];

ammParameter         = (mediaDescriptor / modemDescriptor / muxDescriptor / eventsDescriptor / signalsDescriptor / digitMapDescriptor / eventBufferDescriptor / auditDescriptor);

ammsReply            = (AddToken / MoveToken / ModifyToken / SubtractToken ) EQUAL TerminationID [ LBRKT terminationAudit RBRKT ] ;

subtractRequest      =  SubtractToken EQUAL TerminationID [ LBRKT auditDescriptor RBRKT];

auditRequest         =  (AuditValueToken / AuditCapToken ) EQUAL TerminationID LBRKT auditDescriptor RBRKT;

auditReply           = (AuditValueToken / AuditCapToken ) ( contextTerminationAudit  / auditOther);

auditOther           = EQUAL TerminationID [LBRKT terminationAudit RBRKT];

terminationAudit = auditReturnParameter *(COMMA auditReturnParameter);

contextTerminationAudit = EQUAL CtxToken ( terminationIDList / LBRKT errorDescriptor RBRKT );

auditReturnParameter = (mediaDescriptor / modemDescriptor / muxDescriptor / eventsDescriptor / signalsDescriptor / digitMapDescriptor / observedEventsDescriptor / eventBufferDescriptor / statisticsDescriptor / packagesDescriptor / errorDescriptor / auditItem) ;

auditDescriptor      = AuditToken LBRKT [ auditItem *(COMMA auditItem) ] RBRKT;

notifyRequest        = NotifyToken EQUAL TerminationID LBRKT ( observedEventsDescriptor [ COMMA errorDescriptor ] ) RBRKT;

notifyReply          = NotifyToken EQUAL TerminationID [ LBRKT errorDescriptor RBRKT ];

serviceChangeRequest = ServiceChangeToken EQUAL TerminationID LBRKT serviceChangeDescriptor RBRKT;

serviceChangeReply   = ServiceChangeToken EQUAL TerminationID [LBRKT (errorDescriptor / serviceChangeReplyDescriptor) RBRKT];

errorDescriptor   = ErrorToken EQUAL ErrorCode LBRKT [quotedString] RBRKT;

ErrorCode            = 1*4(DIGIT);

TransactionID        = UINT32;

mId                  = (( domainAddress / domainName ) [":" portNumber]) / mtpAddress / deviceName;

domainName           = "<" (ALPHA / DIGIT) *63(ALPHA / DIGIT / "-" / ".") ">";

deviceName           = pathNAME;

ContextID            = (UINT32 / "*" / "-" / "$");

domainAddress        = "[" (IPv4address / IPv6address) "]";

IPv6address          = hexpart [ ":" IPv4address ];

IPv4address          = V4hex DOT V4hex DOT V4hex DOT V4hex;

V4hex                = 1*3(DIGIT);

hexpart              = hexseq "::" [ hexseq ] / "::" [ hexseq ] / hexseq;

hexseq               = hex4 *( ":" hex4);

hex4                 = 1*4HEXDIG;

portNumber           = UINT16;

mtpAddress           = MTPToken LBRKT 4*8 (HEXDIG) RBRKT;

terminationIDList    = LBRKT TerminationID *(COMMA TerminationID) RBRKT;

pathNAME             = ["*"] NAME *("/" / "*"/ ALPHA / DIGIT /"_" / "$" ) ["@" pathDomainName ];

pathDomainName       = (ALPHA / DIGIT / "*" ) *63(ALPHA / DIGIT / "-" / "*" / ".");

TerminationID        = "ROOT" / pathNAME / "$" / "*";

mediaDescriptor = MediaToken LBRKT mediaParm *(COMMA mediaParm) RBRKT;

mediaParm            = (streamParm / streamDescriptor / terminationStateDescriptor);

streamParm           = ( localDescriptor / remoteDescriptor / localControlDescriptor );

streamDescriptor     = StreamToken EQUAL StreamID LBRKT streamParm *(COMMA streamParm) RBRKT;

localControlDescriptor = LocalControlToken LBRKT localParm *(COMMA localParm) RBRKT;

localParm = ( streamMode / propertyParm / reservedValueMode / reservedGroupMode );

reservedValueMode    = ReservedValueToken EQUAL ( "ON" / "OFF" );

reservedGroupMode    = ReservedGroupToken EQUAL ( "ON" / "OFF" );

streamMode           = ModeToken EQUAL streamModes;

streamModes     = (SendonlyToken / RecvonlyToken / SendrecvToken / InactiveToken / LoopbackToken );

propertyParm         = pkgdName parmValue;

parmValue            = (EQUAL alternativeValue/ INEQUAL VALUE);

alternativeValue     = ( VALUE / LSBRKT VALUE *(COMMA VALUE) RSBRKT / LBRKT VALUE *(COMMA VALUE) RBRKT /  LSBRKT VALUE COLON VALUE RSBRKT );

INEQUAL              = LWSP (">" / "<" / "#" ) LWSP;

LSBRKT               = LWSP "[" LWSP;

RSBRKT               = LWSP "]" LWSP;

localDescriptor      = LocalToken LBRKT octetString RBRKT;

remoteDescriptor     = RemoteToken LBRKT octetString RBRKT;

eventBufferDescriptor= EventBufferToken [ LBRKT eventSpec *( COMMA eventSpec) RBRKT ];

eventSpec      = pkgdName [ LBRKT eventSpecParameter *(COMMA eventSpecParameter) RBRKT ];

eventSpecParameter   = (eventStream / eventOther);

eventBufferControl     = BufferToken EQUAL ( "OFF" / LockStepToken );

terminationStateDescriptor = TerminationStateToken LBRKT terminationStateParm *( COMMA terminationStateParm ) RBRKT;

terminationStateParm = (propertyParm / serviceStates / eventBufferControl );

serviceStates        = ServiceStatesToken EQUAL ( TestToken / OutOfSvcToken / InSvcToken );

muxDescriptor        = MuxToken EQUAL MuxType  terminationIDList;

MuxType              = ( H221Token / H223Token / H226Token / V76Token / extensionParameter );

StreamID             = UINT16;

pkgdName     = (PackageName SLASH ItemID) / (PackageName SLASH "*") / ("*" SLASH "*");

PackageName          = NAME;

ItemID               = NAME;

eventsDescriptor     = EventsToken [ EQUAL RequestID LBRKT requestedEvent *( COMMA requestedEvent ) RBRKT ];

requestedEvent       = pkgdName [ LBRKT eventParameter *( COMMA eventParameter ) RBRKT ];

eventParameter       = ( embedWithSig / embedNoSig / KeepActiveToken /eventDM / eventStream / eventOther );

embedWithSig         = EmbedToken LBRKT signalsDescriptor [COMMA embedFirst ] RBRKT;

embedNoSig        = EmbedToken LBRKT embedFirst RBRKT;

embedFirst      = EventsToken [ EQUAL RequestID LBRKT secondRequestedEvent *(COMMA secondRequestedEvent) RBRKT ];

secondRequestedEvent = pkgdName [ LBRKT secondEventParameter *( COMMA secondEventParameter ) RBRKT ];

secondEventParameter = ( embedSig / KeepActiveToken / eventDM / eventStream / eventOther );

embedSig  = EmbedToken LBRKT signalsDescriptor RBRKT;

eventStream          = StreamToken EQUAL StreamID;

eventOther           = eventParameterName parmValue;

eventParameterName   = NAME;

eventDM              = DigitMapToken EQUAL(( digitMapName ) / (LBRKT digitMapValue RBRKT ));

signalsDescriptor    = SignalsToken LBRKT [ signalParm *(COMMA signalParm)] RBRKT;

signalParm           = signalList / signalRequest;

signalRequest        = signalName [ LBRKT sigParameter *(COMMA sigParameter) RBRKT ];

signalList           = SignalListToken EQUAL signalListId LBRKT signalListParm *(COMMA signalListParm) RBRKT;

signalListId         = UINT16;

signalListParm       = signalRequest;

signalName           = pkgdName;

sigParameter = sigStream / sigSignalType / sigDuration / sigOther / notifyCompletion / KeepActiveToken;

sigStream            = StreamToken EQUAL StreamID;

sigOther             = sigParameterName parmValue;

sigParameterName     = NAME;

sigSignalType        = SignalTypeToken EQUAL signalType;

signalType           = (OnOffToken / TimeOutToken / BriefToken);

sigDuration          = DurationToken EQUAL UINT16;

notifyCompletion     = NotifyCompletionToken EQUAL (LBRKT notificationReason *(COMMA notificationReason) RBRKT);

notificationReason   = ( TimeOutToken / InterruptByEventToken / InterruptByNewSignalsDescrToken / OtherReasonToken );

observedEventsDescriptor = ObservedEventsToken EQUAL RequestID LBRKT observedEvent *(COMMA observedEvent) RBRKT;

observedEvent        = [ TimeStamp LWSP COLON] LWSP pkgdName [ LBRKT observedEventParameter *(COMMA observedEventParameter) RBRKT ];

observedEventParameter = eventStream / eventOther;

RequestID            = ( UINT32 / "*" );

modemDescriptor      = ModemToken (( EQUAL modemType) / (LSBRKT modemType *(COMMA modemType) RSBRKT)) [ LBRKT propertyParm *(COMMA propertyParm) RBRKT ];

modemType            = (V32bisToken / V22bisToken / V18Token / V22Token / V32Token / V34Token / V90Token / V91Token / SynchISDNToken / extensionParameter);

digitMapDescriptor  = DigitMapToken EQUAL ( ( LBRKT digitMapValue RBRKT ) / (digitMapName [ LBRKT digitMapValue RBRKT ]) );

digitMapName        = NAME;

digitMapValue       = ["T" COLON Timer COMMA] ["S" COLON Timer COMMA] ["L" COLON Timer COMMA] digitMap;

Timer               = 1*2DIGIT;

digitMap = (digitString / LWSP "(" LWSP digitStringList LWSP ")" LWSP);

digitStringList   = digitString *( LWSP "|" LWSP digitString );

digitString       = 1*(digitStringElement);

digitStringElement = digitPosition [DOT];

digitPosition     = digitMapLetter / digitMapRange;

digitMapRange     = ("x" / (LWSP "[" LWSP digitLetter LWSP "]" LWSP));

digitLetter       = *((DIGIT "-" DIGIT ) / digitMapLetter);

digitMapLetter    = DIGIT / %x41-4B / %x61-6B / "L" / "S" / "Z";

auditItem            = ( MuxToken / ModemToken / MediaToken / SignalsToken / EventBufferToken / DigitMapToken / StatsToken / EventsToken / ObservedEventsToken / PackagesToken ) ;

serviceChangeDescriptor = ServicesToken LBRKT serviceChangeParm *(COMMA serviceChangeParm) RBRKT;

serviceChangeParm    = (serviceChangeMethod / serviceChangeReason / serviceChangeDelay / serviceChangeAddress / serviceChangeProfile / extension / TimeStamp / serviceChangeMgcId / serviceChangeVersion ) ;

serviceChangeReplyDescriptor = ServicesToken LBRKT servChgReplyParm *(COMMA servChgReplyParm) RBRKT;

servChgReplyParm     = (serviceChangeAddress / serviceChangeMgcId / serviceChangeProfile / serviceChangeVersion / TimeStamp);

serviceChangeMethod  = MethodToken EQUAL (FailoverToken / ForcedToken / GracefulToken / RestartToken / DisconnectedToken / HandOffToken / extensionParameter);

serviceChangeReason  = ReasonToken  EQUAL VALUE;

serviceChangeDelay   = DelayToken   EQUAL UINT32;

serviceChangeAddress = ServiceChangeAddressToken EQUAL ( mId / portNumber );

serviceChangeMgcId   = MgcIdToken   EQUAL mId;

serviceChangeProfile = ProfileToken EQUAL NAME SLASH Version;

serviceChangeVersion = VersionToken EQUAL Version;

extension            = extensionParameter parmValue;

packagesDescriptor   = PackagesToken LBRKT packagesItem *(COMMA packagesItem) RBRKT;

Version              = 1*2(DIGIT);

packagesItem         = NAME "-" UINT16;

TimeStamp            = Date "T" Time;

Date                 = 8(DIGIT);

Time                 = 8(DIGIT);

statisticsDescriptor = StatsToken LBRKT statisticsParameter *(COMMA statisticsParameter ) RBRKT;

statisticsParameter  = pkgdName [EQUAL VALUE];

topologyDescriptor   = TopologyToken LBRKT topologyTriple *(COMMA topologyTriple) RBRKT;

topologyTriple       = terminationA COMMA terminationB COMMA topologyDirection;

terminationA         = TerminationID;

terminationB         = TerminationID;

topologyDirection    = BothwayToken / IsolateToken / OnewayToken;

priority             = PriorityToken EQUAL UINT16;

extensionParameter   = "X"  ("-" / "+") 1*6(ALPHA / DIGIT);

octetString          = *(nonEscapeChar);

nonEscapeChar        = ( "\}" / %x01-7C / %x7E-FF );

quotedString         = DQUOTE *(SafeChar / RestChar/ WSP) DQUOTE;

UINT16               = 1*5(DIGIT);

UINT32               = 1*10(DIGIT);

NAME                 = ALPHA *63(ALPHA / DIGIT / "_" );

VALUE                = quotedString / 1*(SafeChar);

SafeChar             = DIGIT / ALPHA / "+" / "-" / "&" / "!" / "_" / "/" / "\'" / "?" / "@" / "^" / "`" / "~" / "*" / "$" / "\" / "(" / ")" / "%" / "|" / ".";

EQUAL                = LWSP %x3D LWSP;

COLON                = %x3A;

LBRKT                = LWSP %x7B LWSP;

RBRKT                = LWSP %x7D LWSP;

COMMA                = LWSP %x2C LWSP;

DOT                  = %x2E;

SLASH                = %x2F;

ALPHA                = %x41-5A / %x61-7A; 

DIGIT                = %x30-39;

DQUOTE               = %x22;

HEXDIG               = ( DIGIT / "A" / "B" / "C" / "D" / "E" / "F" );

SP                   = %x20;

HTAB                 = %x09;

CR                   = %x0D;

LF                   = %x0A;

LWSP                 = *( WSP / COMMENT / EOL );

EOL                  = (CR [LF] / LF );

WSP                  = SP / HTAB;

SEP                  = ( WSP / EOL / COMMENT) LWSP;

COMMENT              = ";" *(SafeChar/ RestChar / WSP / %x22) EOL ;

RestChar            =  ";" / "[" / "]" / "{" / "}" / ":" / "," / "#" / "<" / ">" / "=";

AddToken                   = ("Add"                   / "A");

AuditToken                 = ("Audit"                 / "AT");

AuditCapToken              = ("AuditCapability"       / "AC");

AuditValueToken            = ("AuditValue"            / "AV");

AuthToken                  = ("Authentication"        / "AU");

BothwayToken               = ("Bothway"               / "BW");

BriefToken                 = ("Brief"                 / "BR");

BufferToken                = ("Buffer"                / "BF");

CtxToken                   = ("Context"               / "C");

ContextAuditToken       = ("ContextAudit"    / "CA");

DigitMapToken              = ("DigitMap"              / "DM");

DisconnectedToken          = ("Disconnected"          / "DC");

DelayToken                 = ("Delay"                 / "DL");

DurationToken              = ("Duration"              / "DR");

EmbedToken                 = ("Embed"                 / "EM");

EmergencyToken             = ("Emergency"             / "EG");

ErrorToken                 = ("Error"                 / "ER");

EventBufferToken           = ("EventBuffer"           / "EB");

EventsToken                = ("Events"                / "E");

FailoverToken              = ("Failover"              / "FL");

ForcedToken                = ("Forced"                / "FO");

GracefulToken              = ("Graceful"              / "GR");

H221Token                  = ("H221" );

H223Token                  = ("H223" );

H226Token                  = ("H226" );

HandOffToken               = ("HandOff"               / "HO");

ImmAckRequiredToken        = ("ImmAckRequired"        / "IA");

InactiveToken              = ("Inactive"              / "IN");

IsolateToken               = ("Isolate"               / "IS");

InSvcToken                 = ("InService"             / "IV");

InterruptByEventToken      = ("IntByEvent"            / "IBE");

InterruptByNewSignalsDescrToken = ("IntBySigDescr"         / "IBS");

KeepActiveToken            = ("KeepActive"            / "KA");

LocalToken                 = ("Local"                 / "L");

LocalControlToken          = ("LocalControl"          / "O");

LockStepToken              = ("LockStep"              / "SP");

LoopbackToken              = ("Loopback"              / "LB");

MediaToken                 = ("Media"                 / "M");

MegacopToken               = ("MEGACO"                / "!");

MethodToken                = ("Method"                / "MT");

MgcIdToken                 = ("MgcIdToTry"            / "MG");

ModeToken                  = ("Mode"                  / "MO");

ModifyToken                = ("Modify"                / "MF");

ModemToken                 = ("Modem"                 / "MD");

MoveToken                  = ("Move"                  / "MV");

MTPToken                   = ("MTP");

MuxToken                   = ("Mux"                   / "MX");

NotifyToken                = ("Notify"                / "N");

NotifyCompletionToken      = ("NotifyCompletion"      / "NC");

ObservedEventsToken        = ("ObservedEvents"        / "OE");

OnewayToken                = ("Oneway"                / "OW");

OnOffToken                 = ("OnOff"                 / "OO");

OtherReasonToken           = ("OtherReason"           / "OR");

OutOfSvcToken              = ("OutOfService"          / "OS");

PackagesToken              = ("Packages"              / "PG");

PendingToken               = ("Pending"               / "PN");

PriorityToken              = ("Priority"              / "PR");

ProfileToken               = ("Profile"               / "PF");

ReasonToken                = ("Reason"                / "RE");

RecvonlyToken              = ("ReceiveOnly"           / "RC");

ReplyToken                 = ("Reply"                 / "P");

RestartToken               = ("Restart"               / "RS");

RemoteToken                = ("Remote"                / "R");

ReservedGroupToken         = ("ReservedGroup"         / "RG");

ReservedValueToken         = ("ReservedValue"         / "RV");

SendonlyToken              = ("SendOnly"              / "SO");

SendrecvToken              = ("SendReceive"           / "SR");

ServicesToken              = ("Services"              / "SV");

ServiceStatesToken         = ("ServiceStates"         / "SI");

ServiceChangeToken         = ("ServiceChange"         / "SC");

ServiceChangeAddressToken  = ("ServiceChangeAddress"  / "AD");

SignalListToken            = ("SignalList"            / "SL");

SignalsToken               = ("Signals"               / "SG");

SignalTypeToken            = ("SignalType"            / "SY");

StatsToken                 = ("Statistics"            / "SA");

StreamToken                = ("Stream"                / "ST");

SubtractToken              = ("Subtract"              / "S");

SynchISDNToken             = ("SynchISDN"             / "SN");

TerminationStateToken      = ("TerminationState"      / "TS");

TestToken                  = ("Test"                  / "TE");

TimeOutToken               = ("TimeOut"               / "TO");

TopologyToken              = ("Topology"              / "TP");

TransToken                 = ("Transaction"           / "T");

ResponseAckToken           = ("TransactionResponseAck" / "K");

V18Token                   = ("V18");

V22Token                   = ("V22");

V22bisToken                = ("V22b");

V32Token                   = ("V32");

V32bisToken                = ("V32b");

V34Token                   = ("V34");

V76Token                   = ("V76");

V90Token                   = ("V90");

V91Token                   = ("V91");

VersionToken               = ("Version"               / "V");

CommandOptionalToken       = "O-";

CommandWildcardToken       = "W-";
