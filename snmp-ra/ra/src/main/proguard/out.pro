mofokom.in.snmp.resource.impl.SNMPActivityImpl -> mofokom.in.snmp.resource.impl.i:
    java.lang.Object getPdu() -> getPdu
mofokom.in.snmp.resource.impl.SNMPResourceAdaptor -> mofokom.in.snmp.resource.impl.SNMPResourceAdaptor:
    java.util.Map sessionMap -> sessionMap
    java.util.concurrent.atomic.AtomicLong seq -> seq
    javax.slee.resource.ResourceAdaptorContext context -> context
    java.lang.String host -> host
    java.lang.Integer port -> port
    java.lang.String socketType -> socketType
    java.lang.String bindAddr -> bindAddr
    java.lang.Integer maxRecvSize -> maxRecvSize
    java.lang.String community -> community
    byte[] bindAddrInet -> bindAddrInet
    javax.slee.resource.FireableEventType requestPduEventType -> requestPduEventType
    javax.slee.resource.FireableEventType trapEventType -> trapEventType
    javax.slee.resource.FireableEventType updateEventType -> updateEventType
    javax.slee.resource.FireableEventType rawPduEventType -> rawPduEventType
    javax.slee.resource.FireableEventType updateErrorEventType -> updateErrorEventType
    boolean initialized -> initialized
    java.lang.Integer version -> version
    long startTime -> startTime
    java.lang.Boolean listen -> listen
    javax.slee.resource.FireableEventType transportEventType -> transportEventType
    int[] retryIntervals -> retryIntervals
    mofokom.in.snmp.resource.impl.SNMPUsageParameters usage -> usage
    java.util.Map contextMap -> contextMap
    java.lang.Long responseTimeout -> responseTimeout
    uk.co.westhawk.snmp.stack.SnmpContextBasisFace snmpContext -> snmpContext
    uk.co.westhawk.snmp.stack.ListeningContextPool defTrap -> defTrap
    void raActive() -> raActive
    void raStopping() -> raStopping
    void raInactive() -> raInactive
    void raVerifyConfiguration(javax.slee.resource.ConfigProperties) -> raVerifyConfiguration
    void raConfigurationUpdate(javax.slee.resource.ConfigProperties) -> raConfigurationUpdate
    java.lang.Object getResourceAdaptorInterface(java.lang.String) -> getResourceAdaptorInterface
    void fireFailureEvent(uk.co.westhawk.snmp.stack.Pdu,java.lang.Exception) -> fireFailureEvent
    void fireFailureEvent(mofokom.in.snmp.resource.impl.SNMPActivityImpl,uk.co.westhawk.snmp.stack.Pdu,java.lang.Exception) -> fireFailureEvent
    mofokom.in.snmp.resource.impl.SNMPActivityImpl createActivity(uk.co.westhawk.snmp.stack.Pdu) -> createActivity
    uk.co.westhawk.snmp.stack.SnmpContextBasisFace initializeContext(java.net.InetSocketAddress) -> initializeContext
    uk.co.westhawk.snmp.stack.SnmpContextBasisFace initializeV1Context(java.net.InetSocketAddress) -> initializeV1Context
    uk.co.westhawk.snmp.stack.SnmpContextBasisFace initializeV2Context(java.net.InetSocketAddress) -> initializeV2Context
    uk.co.westhawk.snmp.stack.SnmpContextBasisFace initializeV3Context(java.net.InetSocketAddress) -> initializeV3Context
    void initializeListener() -> initializeListener
    uk.co.westhawk.snmp.stack.TrapPduv1 createV1PduTrap(java.lang.String,int) -> createV1PduTrap
    uk.co.westhawk.snmp.stack.InformPdu createInformPdu(int) -> createInformPdu
    uk.co.westhawk.snmp.stack.InformPdu createInformPdu() -> createInformPdu
    uk.co.westhawk.snmp.stack.TrapPduv2 createV2Trap() -> createV2Trap
    uk.co.westhawk.snmp.stack.TrapPduv2 createV3Trap() -> createV3Trap
    uk.co.westhawk.snmp.stack.GetBulkPdu createGetBulkPdu(int,int) -> createGetBulkPdu
    uk.co.westhawk.snmp.stack.GetNextPdu createGetNextPdu(int) -> createGetNextPdu
    uk.co.westhawk.snmp.stack.GetNextPdu createGetNextPdu() -> createGetNextPdu
    uk.co.westhawk.snmp.stack.GetPdu createGetPdu() -> createGetPdu
    uk.co.westhawk.snmp.stack.GetPdu createGetPdu(int) -> createGetPdu
    uk.co.westhawk.snmp.stack.SetPdu createSetPdu(int) -> createSetPdu
    uk.co.westhawk.snmp.stack.SetPdu createSetPdu() -> createSetPdu
    uk.co.westhawk.snmp.stack.ResponsePdu createResponsePdu(uk.co.westhawk.snmp.stack.Pdu) -> createResponsePdu
    uk.co.westhawk.snmp.stack.ReportPdu createReportPdu(uk.co.westhawk.snmp.stack.Pdu) -> createReportPdu
    uk.co.westhawk.snmp.stack.MultiResponsePdu createReportPdu() -> createReportPdu
    uk.co.westhawk.snmp.stack.DiscoveryPdu createDiscoveryPdu() -> createDiscoveryPdu
    uk.co.westhawk.snmp.stack.InterfacePdu createInterfacePdu() -> createInterfacePdu
    uk.co.westhawk.snmp.stack.UpSincePdu createUpSincePdu() -> createUpSincePdu
    mofokom.in.snmp.resource.SNMPActivity sendPdu(uk.co.westhawk.snmp.stack.Pdu,java.net.InetSocketAddress) -> sendPdu
    mofokom.in.snmp.resource.SNMPActivity sendPdu(uk.co.westhawk.snmp.stack.Pdu) -> sendPdu
    void requestPduReceived(uk.co.westhawk.snmp.event.RequestPduEvent) -> requestPduReceived
    void rawPduReceived(uk.co.westhawk.snmp.event.RawPduEvent) -> rawPduReceived
    void trapReceived(uk.co.westhawk.snmp.event.TrapEvent) -> trapReceived
    void update(java.util.Observable,java.lang.Object) -> update
    long getAgentUptime() -> getAgentUptime
    uk.co.westhawk.snmp.stack.AsnInteger createAsnInteger(int) -> createAsnInteger
    uk.co.westhawk.snmp.stack.AsnObjectId createAsnObjectId(java.lang.String) -> createAsnObjectId
    uk.co.westhawk.snmp.stack.AsnObjectId createAsnObjectId(long[]) -> createAsnObjectId
    uk.co.westhawk.snmp.stack.AsnOctets createAsnOctets(java.net.InetAddress) -> createAsnOctets
    uk.co.westhawk.snmp.stack.AsnOctets createAsnOctets(java.net.Inet4Address,mofokom.in.snmp.resource.AsnType) -> createAsnOctets
    uk.co.westhawk.snmp.stack.AsnOctets createAsnOctets(char[]) -> createAsnOctets
    uk.co.westhawk.snmp.stack.AsnOctets createAsnOctets(byte[]) -> createAsnOctets
    uk.co.westhawk.snmp.stack.AsnOctets createAsnOctets(byte[],mofokom.in.snmp.resource.AsnType) -> createAsnOctets
    uk.co.westhawk.snmp.stack.AsnOctets createAsnOctets(java.lang.String) -> createAsnOctets
    uk.co.westhawk.snmp.stack.AsnOctets createAsnOctets(java.util.Calendar) -> createAsnOctets
    uk.co.westhawk.snmp.stack.AsnPrimitive createAsn(mofokom.in.snmp.resource.AsnType) -> createAsn
    uk.co.westhawk.snmp.stack.AsnUnsInteger createAsnUnsInteger(long) -> createAsnUnsInteger
    uk.co.westhawk.snmp.stack.AsnUnsInteger createAsnUnsInteger(long,mofokom.in.snmp.resource.AsnType) -> createAsnUnsInteger
    uk.co.westhawk.snmp.stack.AsnUnsInteger64 createAsnUnsInteger64(java.math.BigInteger) -> createAsnUnsInteger64
    uk.co.westhawk.snmp.stack.AsnNull createAsnNull() -> createAsnNull
    uk.co.westhawk.snmp.stack.SnmpContextBasisFace getSnmpContext() -> getSnmpContext
    int[] getRetryIntervals() -> getRetryIntervals
    uk.co.westhawk.snmp.stack.Pdu createPdu(java.lang.Class) -> createPdu
    void activityTimeout(mofokom.in.snmp.resource.impl.SNMPActivityImpl) -> activityTimeout
    void processTransactionFailure(mofokom.resource.common.TransactionException) -> processTransactionFailure
    mofokom.in.snmp.resource.impl.SNMPActivityImpl createActivity(java.lang.Object) -> createActivity
    java.util.Set getEventTypeSet() -> getEventTypeSet
    void activityTimeout(mofokom.resource.common.AbstractTransaction) -> activityTimeout
    java.util.Collection getEventTypeSet() -> getEventTypeSet
    mofokom.resource.common.AbstractTransaction createActivity(java.lang.Object) -> createActivity
    int[] access$100(mofokom.in.snmp.resource.impl.SNMPResourceAdaptor) -> access$100
    mofokom.in.snmp.resource.impl.SNMPUsageParameters access$200(mofokom.in.snmp.resource.impl.SNMPResourceAdaptor) -> access$200
    javax.slee.facilities.Tracer access$300(mofokom.in.snmp.resource.impl.SNMPResourceAdaptor) -> access$300
    javax.slee.facilities.Tracer access$400(mofokom.in.snmp.resource.impl.SNMPResourceAdaptor) -> access$400
    void access$500(mofokom.in.snmp.resource.impl.SNMPResourceAdaptor,uk.co.westhawk.snmp.stack.Pdu,java.lang.Exception) -> access$500
mofokom.in.snmp.resource.impl.SNMPResourceAdaptor$PduSender -> mofokom.in.snmp.resource.impl.SNMPResourceAdaptor$a:
    uk.co.westhawk.snmp.stack.Pdu pdu -> a
    mofokom.in.snmp.resource.impl.SNMPResourceAdaptor this$0 -> a
    void run() -> run
mofokom.in.snmp.resource.impl.SNMPResourceAdaptor$PduSender$1 -> mofokom.in.snmp.resource.impl.SNMPResourceAdaptor$a$a:
    mofokom.in.snmp.resource.impl.SNMPResourceAdaptor$PduSender this$1 -> a
    java.lang.Boolean run() -> a
    java.lang.Object run() -> run
mofokom.in.snmp.resource.impl.SNMPUsageParameters -> mofokom.in.snmp.resource.impl.SNMPUsageParameters:
    void incrementPduTxOK(long) -> incrementPduTxOK
    void incrementPduRx(long) -> incrementPduRx
    void incrementPduTxNOK(long) -> incrementPduTxNOK
mofokom.resource.common.AbstractResourceAdaptor -> mofokom.in.snmp.resource.impl.d:
    javax.slee.facilities.EventLookupFacility eventLookup -> eventLookup
    javax.slee.facilities.AlarmFacility alarmFacility -> alarmFacility
    java.lang.Integer activityDimension -> activityDimension
    java.util.Map alarmMap -> alarmMap
    javax.slee.resource.ResourceAdaptorContext raContext -> raContext
    mofokom.resource.common.AtomicRollingSequence sequence -> sequence
    java.util.concurrent.ThreadPoolExecutor executor -> executor
    java.util.Map activityMap -> activityMap
    javax.slee.facilities.Tracer tracer -> tracer
    javax.slee.resource.SleeEndpoint sleeEndpoint -> sleeEndpoint
    javax.slee.transaction.SleeTransactionManager sleeTransactionManager -> sleeTransactionManager
    javax.slee.resource.ConfigProperties properties -> properties
    int count -> count
    boolean synchronous -> synchronous
    mofokom.resource.common.EventFilter eventFilter -> eventFilter
    mofokom.resource.common.ResourceAdaptorEntityLifecycle raState -> raState
    java.lang.String VENDOR -> VENDOR
    java.lang.String VERSION -> VERSION
    int DEFAULT_ACTIVITY_FLAGS -> DEFAULT_ACTIVITY_FLAGS
    int MARSHAL_ACTIVITY_FLAGS -> MARSHAL_ACTIVITY_FLAGS
    int DEFAULT_EVENT_FLAGS -> DEFAULT_EVENT_FLAGS
    boolean marshalEvent -> marshalEvent
    boolean marshalActivity -> marshalActivity
    javax.slee.resource.Marshaler marshaler -> marshaler
    void setResourceAdaptorContext(javax.slee.resource.ResourceAdaptorContext) -> setResourceAdaptorContext
    mofokom.resource.common.UsageParameters getDefaultUsageParameterSet() -> getDefaultUsageParameterSet
    void processTransactionFailure(mofokom.resource.common.TransactionException) -> processTransactionFailure
    mofokom.resource.common.AbstractTransaction createActivity(java.lang.Object) -> createActivity
    void unsetResourceAdaptorContext() -> unsetResourceAdaptorContext
    void raConfigure(javax.slee.resource.ConfigProperties) -> raConfigure
    void raUnconfigure() -> raUnconfigure
    void startNewActivityTransacted(mofokom.resource.common.AbstractTransaction) -> startNewActivityTransacted
    void requestAsyncCommit(mofokom.resource.common.AbstractTransaction) -> requestAsyncCommit
    void startNewActivitySuspended(mofokom.resource.common.AbstractTransaction) -> startNewActivitySuspended
    void raActive() -> raActive
    void raStopping() -> raStopping
    void raInactive() -> raInactive
    void raVerifyConfiguration(javax.slee.resource.ConfigProperties) -> raVerifyConfiguration
    void raConfigurationUpdate(javax.slee.resource.ConfigProperties) -> raConfigurationUpdate
    java.lang.Object getResourceAdaptorInterface(java.lang.String) -> getResourceAdaptorInterface
    javax.slee.resource.Marshaler getMarshaler() -> getMarshaler
    void serviceActive(javax.slee.resource.ReceivableService) -> serviceActive
    void serviceStopping(javax.slee.resource.ReceivableService) -> serviceStopping
    void serviceInactive(javax.slee.resource.ReceivableService) -> serviceInactive
    void queryLiveness(javax.slee.resource.ActivityHandle) -> queryLiveness
    java.lang.Object getActivity(javax.slee.resource.ActivityHandle) -> getActivity
    javax.slee.resource.ActivityHandle getActivityHandle(java.lang.Object) -> getActivityHandle
    void administrativeRemove(javax.slee.resource.ActivityHandle) -> administrativeRemove
    void eventProcessingSuccessful(javax.slee.resource.ActivityHandle,javax.slee.resource.FireableEventType,java.lang.Object,javax.slee.Address,javax.slee.resource.ReceivableService,int) -> eventProcessingSuccessful
    void eventProcessingFailed(javax.slee.resource.ActivityHandle,javax.slee.resource.FireableEventType,java.lang.Object,javax.slee.Address,javax.slee.resource.ReceivableService,int,javax.slee.resource.FailureReason) -> eventProcessingFailed
    void eventUnreferenced(javax.slee.resource.ActivityHandle,javax.slee.resource.FireableEventType,java.lang.Object,javax.slee.Address,javax.slee.resource.ReceivableService,int) -> eventUnreferenced
    void activityEnded(javax.slee.resource.ActivityHandle) -> activityEnded
    void activityUnreferenced(javax.slee.resource.ActivityHandle) -> activityUnreferenced
    void clearAlarm(java.lang.String) -> clearAlarm
    void raiseAlarm(java.lang.String,java.lang.String) -> raiseAlarm
    java.util.Timer getTimer() -> getTimer
    void endActivity(mofokom.resource.common.AbstractTransaction) -> endActivity
    void endActivity(mofokom.resource.common.TransactionHandle) -> endActivity
    void fireEventOnTransaction(mofokom.resource.common.AbstractTransaction,javax.slee.EventTypeID,java.lang.Object) -> fireEventOnTransaction
    void fireEventOnTransaction(mofokom.resource.common.AbstractTransaction,javax.slee.EventTypeID,java.lang.Object,javax.slee.Address) -> fireEventOnTransaction
    void fireEventOnTransaction(mofokom.resource.common.AbstractTransaction,javax.slee.resource.FireableEventType,java.lang.Object) -> fireEventOnTransaction
    void fireEventOnTransaction(mofokom.resource.common.AbstractTransaction,javax.slee.resource.FireableEventType,java.lang.Object,javax.slee.Address) -> fireEventOnTransaction
    java.util.Collection getEventTypeSet() -> getEventTypeSet
    java.util.TimerTask scheduleEndActivity(mofokom.resource.common.AbstractTransaction,java.util.Date) -> scheduleEndActivity
    void activityTimeout(mofokom.resource.common.AbstractTransaction) -> activityTimeout
    void beginTransaction() -> beginTransaction
    void commitTransaction() -> commitTransaction
    void rollbackTransaction() -> rollbackTransaction
    boolean isEventSupressed(javax.slee.EventTypeID) -> isEventSupressed
    int getActivityFlags() -> getActivityFlags
    int getEventFlags() -> getEventFlags
    mofokom.resource.common.ResourceAdaptorEntityLifecycle getResourceAdaptorEntityLifecycle() -> getResourceAdaptorEntityLifecycle
    void setTracer(javax.slee.facilities.Tracer) -> setTracer
mofokom.resource.common.AbstractResourceAdaptor$1 -> mofokom.in.snmp.resource.impl.d$b:
    mofokom.resource.common.AbstractTransaction val$transaction -> a
    mofokom.resource.common.AbstractResourceAdaptor this$0 -> a
    void committed() -> committed
    void rolledBack(javax.transaction.RollbackException) -> rolledBack
    void heuristicMixed(javax.transaction.HeuristicMixedException) -> heuristicMixed
    void heuristicRollback(javax.transaction.HeuristicRollbackException) -> heuristicRollback
    void systemException(javax.transaction.SystemException) -> systemException
mofokom.resource.common.AbstractResourceAdaptor$2 -> mofokom.in.snmp.resource.impl.d$a:
    mofokom.resource.common.AbstractResourceAdaptor this$0 -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
mofokom.resource.common.AbstractResourceAdaptor$3 -> mofokom.in.snmp.resource.impl.d$c:
    java.lang.ThreadGroup val$tg -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
mofokom.resource.common.AbstractResourceAdaptor$ScheduledEndActivityTask -> mofokom.in.snmp.resource.impl.d$d:
    mofokom.resource.common.AbstractTransaction txn -> a
    mofokom.resource.common.AbstractResourceAdaptor this$0 -> a
    void run() -> run
mofokom.resource.common.AbstractSynchronousTransaction -> mofokom.in.snmp.resource.impl.j:
    mofokom.resource.common.SimpleFuture sync -> a
    java.util.concurrent.Future getSynchronousResult() -> getSynchronousResult
    void prepare(java.lang.Object) -> a
mofokom.resource.common.AbstractTransaction -> mofokom.in.snmp.resource.impl.m:
    int ra -> a
    int seq -> b
    mofokom.resource.common.TransactionHandle handle -> a
    java.lang.Object attachment -> a
    java.util.TimerTask task -> a
    mofokom.resource.common.TransactionHandle getActivityHandle() -> a
    java.lang.Object getAttachment() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean cancelTask() -> a
    void prepare(java.lang.Object) -> a
mofokom.resource.common.AtomicRollingSequence -> mofokom.in.snmp.resource.impl.c:
mofokom.resource.common.DefaultMarshaller -> mofokom.in.snmp.resource.impl.e:
    java.io.InputStream dummyIn -> a
    java.io.OutputStream dummyOut -> a
    java.util.concurrent.SynchronousQueue queue -> a
    int getEstimatedEventSize(javax.slee.resource.FireableEventType,java.lang.Object) -> getEstimatedEventSize
    java.nio.ByteBuffer getEventBuffer(javax.slee.resource.FireableEventType,java.lang.Object) -> getEventBuffer
    void releaseEventBuffer(javax.slee.resource.FireableEventType,java.lang.Object,java.nio.ByteBuffer) -> releaseEventBuffer
    void marshalEvent(javax.slee.resource.FireableEventType,java.lang.Object,java.io.DataOutput) -> marshalEvent
    java.lang.Object unmarshalEvent(javax.slee.resource.FireableEventType,java.io.DataInput) -> unmarshalEvent
    int getEstimatedHandleSize(javax.slee.resource.ActivityHandle) -> getEstimatedHandleSize
    void marshalHandle(javax.slee.resource.ActivityHandle,java.io.DataOutput) -> marshalHandle
    javax.slee.resource.ActivityHandle unmarshalHandle(java.io.DataInput) -> unmarshalHandle
    void marshalSerializable(java.lang.Object,java.io.DataOutput) -> a
    java.io.Serializable unmarshalSerializable(java.lang.Class,java.io.DataInput) -> a
mofokom.resource.common.DefaultMarshaller$1 -> mofokom.in.snmp.resource.impl.e$c:
    java.io.DataOutput val$out -> a
    void write(int) -> write
mofokom.resource.common.DefaultMarshaller$2 -> mofokom.in.snmp.resource.impl.e$a:
    java.nio.ByteBuffer val$buffy -> a
    void write(int) -> write
mofokom.resource.common.DefaultMarshaller$3 -> mofokom.in.snmp.resource.impl.e$b:
    java.io.DataInput val$in -> a
    int read() -> read
mofokom.resource.common.EventFilter -> mofokom.in.snmp.resource.impl.a:
    java.util.Set eventTypeMaskSet -> a
    java.util.Map serviceEventTypeMap -> a
    void serviceActive(javax.slee.resource.ReceivableService) -> a
    void serviceStopping(javax.slee.resource.ReceivableService) -> b
    void serviceInactive(javax.slee.resource.ReceivableService) -> c
    void calculateEvenTypeSet() -> a
mofokom.resource.common.ResourceAdaptorEntityLifecycle -> mofokom.in.snmp.resource.impl.h:
    mofokom.resource.common.ResourceAdaptorEntityLifecycle UNCONFIGURED -> a
    mofokom.resource.common.ResourceAdaptorEntityLifecycle INACTIVE -> b
    mofokom.resource.common.ResourceAdaptorEntityLifecycle ACTIVE -> c
    mofokom.resource.common.ResourceAdaptorEntityLifecycle STOPPING -> d
mofokom.resource.common.SimpleFuture -> mofokom.in.snmp.resource.impl.f:
    java.lang.Object value -> a
    boolean completed -> a
    boolean cancelled -> b
    boolean cancel(boolean) -> cancel
    boolean isCancelled() -> isCancelled
    boolean isDone() -> isDone
    void set(java.lang.Object) -> a
    java.lang.Object get() -> get
    java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
mofokom.resource.common.TransactionException -> mofokom.in.snmp.resource.impl.k:
mofokom.resource.common.TransactionHandle -> mofokom.in.snmp.resource.impl.b:
    int id -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
mofokom.resource.common.UsageParameters -> mofokom.in.snmp.resource.impl.l:
uk.co.westhawk.examplev3.SimpleUsmAgent -> mofokom.in.snmp.resource.impl.g:
    java.lang.String _snmpEngineId -> a
    int _boots -> a
    int _time -> b
    int _usmStatsUnknownEngineIDs -> c
    int _usmStatsNotInTimeWindows -> d
    java.lang.String getSnmpEngineId() -> getSnmpEngineId
    int getSnmpEngineBoots() -> getSnmpEngineBoots
    int getSnmpEngineTime() -> getSnmpEngineTime
    void setSnmpContext(uk.co.westhawk.snmp.stack.SnmpContextv3Basis) -> setSnmpContext
    long getUsmStatsUnknownEngineIDs() -> getUsmStatsUnknownEngineIDs
    long getUsmStatsNotInTimeWindows() -> getUsmStatsNotInTimeWindows
